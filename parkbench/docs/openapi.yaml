openapi: 3.0.0
info:
  title: ParkBench API
  version: 0.1.0
  description: |
    API specification for ParkBench: an open, vendor-neutral AI agent identity,
    discovery, negotiation, and orchestration platform.
servers:
  - url: http://localhost:8000/api/v1 # Example server URL

paths:
  /register:
    post:
      summary: Register a new agent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '../backend/api/schemas/agent_registration.json' # Path relative to openapi.yaml
      responses:
        '200':
          description: Agent registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  agent_id:
                    type: string
                    format: uuid
                  agentName:
                    type: string
                  status:
                    type: string
                    enum: [registered]
        '400':
          description: Invalid request payload

  /renew:
    post:
      summary: Renew an agent's registration
      # ... (details to be added) ...
      responses:
        '200':
          description: Agent registration renewed

  /deactivate:
    post:
      summary: Deactivate an agent
      # ... (details to be added) ...
      responses:
        '200':
          description: Agent deactivated

  /status:
    get:
      summary: Get an agent's registration status
      parameters:
        - name: agentName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agent status

  /agents/search:
    get:
      summary: Search for agents based on criteria
      parameters:
        - name: skill
          in: query
          required: false
          schema:
            type: string
        - name: protocol
          in: query
          required: false
          schema:
            type: string
        - name: a2a_compliant
          in: query
          required: false
          schema:
            type: boolean
        - name: verified
          in: query
          required: false
          schema:
            type: boolean
        - name: active
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: List of matching agents

  /agents/{agentName}:
    get:
      summary: Get an agent's profile
      parameters:
        - name: agentName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agent profile details

  /agents/{agentName}/a2a:
    get:
      summary: Get A2A descriptors for an agent
      parameters:
        - name: agentName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A2A descriptors
          content:
            application/json:
              schema:
                $ref: '../backend/api/schemas/a2a_descriptor.json' # Path relative to openapi.yaml

  /a2a/negotiate:
    post:
      summary: Negotiate a task with candidate agents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                initiatingAgentName:
                  type: string
                requestedTask:
                  type: string
                context:
                  type: object
                preferredCapabilities:
                  type: object # Define further if needed
      responses:
        '200':
          description: Candidate agents for the task

  /a2a/session/initiate:
    post:
      summary: Initiate an A2A session
      # ... (details to be added) ...
      responses:
        '200':
          description: A2A session initiated

  /a2a/session/{sessionID}/status:
    get:
      summary: Get the status of an A2A session
      parameters:
        - name: sessionID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session status

components:
  schemas:
    # Re-usable schemas can be defined here if not referencing directly
    # For now, referencing directly from the JSON files.
    AgentRegistration:
      $ref: '../backend/api/schemas/agent_registration.json'
    A2ADescriptor:
      $ref: '../backend/api/schemas/a2a_descriptor.json'
    A2ANegotiation:
      $ref: '../backend/api/schemas/a2a_negotiation.json'
